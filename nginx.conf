load_module /usr/lib/nginx/modules/ngx_http_headers_more_filter_module.so;
load_module /usr/lib/nginx/modules/ndk_http_module.so;  # Needed by lua
load_module /usr/lib/nginx/modules/ngx_http_lua_module.so;
error_log /dev/stderr notice;
pid /home/scl/nginx.pid;

daemon off;
worker_processes 1;
pcre_jit on;

# Makes the GIT_COMMIT environment variable available (specifically to lua code so we can log it)
env GIT_COMMIT;

events {
    worker_connections 1024;
    accept_mutex off;
    use epoll;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Requires CloudFront to be configured to send this, for example by using the
    # Managed-AllViewerAndCloudFrontHeaders-2022-06 origin request policy
    real_ip_header CloudFront-Viewer-Address;

    # This is safe because we only accept connections from the ALB, which itself can only accept
    # connections from CloudFront
    set_real_ip_from 0.0.0.0/0;

    more_set_headers "Server: scl";

    client_body_temp_path /tmp/nginx-client-body;
    client_max_body_size 0;

    sendfile on;
    tcp_nodelay on;
    tcp_nopush on;

    proxy_temp_path /tmp/nginx-proxy;
    proxy_max_temp_file_size 0;
    proxy_request_buffering off;

    keepalive_timeout 30s;

    log_format asim escape=json '{'
      '"EventMessage":"$request",'
      '"EventCount":1,'
      '"EventStartTime":"$time_iso8601",'
      '"EventEndTime":"$time_iso8601",'
      '"EventType":"nginx",'  # In Python projects in DBT, this is the name of the logger
      '"EventResult":"NA",'
      '"EventSeverity":"Informational",'
      '"EventOriginalSeverity":"access",'
      '"EventSchema":"ProcessEvent",'
      '"EventSchemaVersion":"0.1.4",'
      '"ActingAppType":"nginx",'
      '"AdditionalFields":{'
        '"SclNginxAsimVerion":"$git_commit",'  # The version of the library making this log
        '"TraceHeaders":{"X-Amzn-Trace-Id":"$http_x_amzn_trace_id"}'
      '},'
      '"EventOriginalSeverity":"access",'
      '"HttpUserAgent":"$http_user_agent",'
      '"SrcPortNumber":"$remote_port",'
      '"SrcIpAddr":"$remote_addr",'
      '"IpAddr":"$remote_addr",'
      '"SrcUsername":"AnonymousUser"'
    '}';
    access_log /dev/stdout asim;

    upstream django {
        keepalive 32;
        server 127.0.0.1:8001;
    }

    server {
        listen 8000;

        set_by_lua_block $git_commit {
            return os.getenv("GIT_COMMIT")
        }

        location /assets/ {
            alias /app/assets/;

            # Static assets have MD5 of their content in the filename, added by Django's
            # collectstatic with ManifestStaticFilesStorage, so we can use far-future expires
            # headers.
            expires 7d;
            add_header Pragma public;
            add_header Cache-Control public;

            # We gzip static resources after Django's collectstatic, and this allows nginx to find
            # and serve them
            gzip_static on;
            gzip_proxied any;
        }

        location / {
            proxy_pass http://django;

            expires 0;
            add_header Pragma no-cache;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
        }
    }

    # Not used, but causes errors if they can't be written to
    fastcgi_temp_path /tmp/nginx-fastcgi;
    uwsgi_temp_path /tmp/nginx-uwsgi;
    scgi_temp_path /tmp/nginx-scgi;
}
