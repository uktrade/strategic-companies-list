(()=>{var __webpack_modules__={"./scl/core/static/scl.js":
/*!********************************!*\
  !*** ./scl/core/static/scl.js ***!
  \********************************/()=>{eval('(() => {\n  const timeout = duration => {\n    return new Promise(resolve => setTimeout(resolve, duration));\n  };\n  const getToken = () => document.querySelector("[data-scl-csrf-token]").getAttribute("data-scl-csrf-token");\n  const minTimeFetch = async (minTime, resource, options) => {\n    // Wraps fetch in an API where it has a minimum run time (in case it\'s really quick so\n    // the user has a chance to see "Saving" or similar, and also avoids it from raising an\n    // exception, so calling code doesn\'t need try/catch blocks\n    const start = performance.now();\n    let error = null;\n    let response = null;\n    try {\n      response = await fetch(resource, options);\n      if (!response.ok) {\n        throw new Error();\n      }\n    } catch (_error) {\n      error = _error;\n    }\n    const end = performance.now();\n    await timeout(Math.max(750, performance.now() - start));\n    return {\n      error,\n      response\n    };\n  };\n  const registerEditButton = editButton => {\n    let isEditable = false;\n    const token = getToken();\n    const save = async () => {\n      isEditable = !isEditable;\n      const data = {};\n      const id = editButton.getAttribute("data-scl-edit-id");\n      const target = editButton.getAttribute("data-scl-edit-target");\n      const method = editButton.getAttribute("data-scl-method");\n      const endpoint = editButton.getAttribute("data-scl-endpoint");\n      editButton.innerHTML = isEditable ? "Save" : "Edit";\n      const contentSource = Array.from(document.querySelectorAll(`[data-scl-edit-source="${target}"]`));\n      contentSource.map(source => source.toggleAttribute("contenteditable", isEditable));\n      if (isEditable) return;\n      editButton.disabled = true;\n      editButton.innerHTML = "Saving...";\n      contentSource.forEach(item => {\n        data["id"] = id;\n        data[item.getAttribute("data-scl-payload")] = item.innerHTML;\n      });\n      const {\n        error,\n        response\n      } = await minTimeFetch(750, endpoint, {\n        headers: {\n          "Content-Type": "application/json",\n          "X-CSRFToken": token\n        },\n        method: method,\n        body: JSON.stringify(data)\n      });\n      editButton.innerHTML = error ? "Error!" : "Saved";\n      await timeout(750);\n      editButton.disabled = false;\n      editButton.innerHTML = "Edit";\n    };\n    editButton.addEventListener("click", save);\n  };\n  const registerSaveTranscriptButton = button => {\n    const token = getToken();\n    const targetId = button.getAttribute("data-transcript-target");\n    const endPoint = button.getAttribute("data-scl-endpoint");\n    const saveTranscript = async () => {\n      button.innerHTML = "Saving...";\n      const data = document.querySelector(`#transcription-target-${targetId} p span`).innerHTML;\n      const {\n        error,\n        response\n      } = await minTimeFetch(750, endPoint, {\n        headers: {\n          "Content-Type": "application/json",\n          "X-CSRFToken": token\n        },\n        method: "POST",\n        body: JSON.stringify({\n          note: data\n        })\n      });\n      button.innerHTML = error ? "Error!" : "Saved";\n      await timeout(750);\n      window.location.reload();\n    };\n    button.addEventListener("click", saveTranscript);\n  };\n  const registerDeleteTranscriptButton = button => {\n    const token = getToken();\n    noteId = button.getAttribute("data-scl-notes-id");\n    endPoint = button.getAttribute("data-scl-endpoint");\n    const deleteNote = async () => {\n      button.innerHTML = "Deleting...";\n      const {\n        error,\n        response\n      } = await minTimeFetch(750, endPoint, {\n        headers: {\n          "Content-Type": "application/json",\n          "X-CSRFToken": token\n        },\n        method: "DELETE",\n        body: JSON.stringify({\n          id: noteId\n        })\n      });\n      button.innerHTML = error ? "Error!" : "Deleted";\n      await timeout(750);\n      window.location.reload();\n    };\n    button.addEventListener("click", deleteNote);\n  };\n  const registerPrintButton = button => {\n    button.addEventListener("click", () => window.print());\n  };\n  document.addEventListener("DOMContentLoaded", () => {\n    document.querySelectorAll(\'[data-module="scl-edit-button"]\').forEach(registerEditButton);\n    document.querySelectorAll(\'[data-module="scl-save-transcript"]\').forEach(registerSaveTranscriptButton);\n    document.querySelectorAll(\'[data-module="scl-delete-transcript"]\').forEach(registerDeleteTranscriptButton);\n    document.querySelectorAll(\'[data-module="scl-print-button"]\').forEach(registerPrintButton);\n  });\n})();\n(() => {\n  const token = document.querySelector("[data-scl-csrf-token]").getAttribute("data-scl-csrf-token");\n\n  // Utility functions\n  const timeout = duration => new Promise(resolve => setTimeout(resolve, duration));\n  const minTimeFetch = async (minTime, resource, options) => {\n    const start = performance.now();\n    let error = null;\n    let response = null;\n    try {\n      response = await fetch(resource, options);\n      if (!response.ok) {\n        throw new Error();\n      }\n    } catch (_error) {\n      error = _error;\n    }\n    const end = performance.now();\n    await timeout(Math.max(750, performance.now() - start));\n    return {\n      error,\n      response\n    };\n  };\n\n  // Helper function to safely create DOM elements\n  const createElement = (tag, attributes = {}, children = []) => {\n    const element = document.createElement(tag);\n\n    // Set attributes\n    Object.entries(attributes).forEach(([key, value]) => {\n      if (key === "className") {\n        element.className = value;\n      } else if (key === "textContent") {\n        element.textContent = value;\n      } else {\n        element.setAttribute(key, value);\n      }\n    });\n\n    // Append children\n    children.forEach(child => {\n      if (typeof child === "string") {\n        element.appendChild(document.createTextNode(child));\n      } else {\n        element.appendChild(child);\n      }\n    });\n    return element;\n  };\n\n  // Update the last updated timestamp\n  const updateLastUpdated = () => {\n    const lastUpdatedElement = document.getElementById("company-last-updated");\n    if (lastUpdatedElement) {\n      const now = new Date();\n      const month = now.toLocaleString("en-US", {\n        month: "long"\n      });\n      const day = now.getDate();\n      const year = now.getFullYear();\n      const hour = now.getHours() % 12 || 12;\n      const minute = now.getMinutes().toString().padStart(2, "0");\n      const ampm = now.getHours() >= 12 ? "p.m." : "a.m.";\n      lastUpdatedElement.textContent = `Last updated: ${month} ${day}, ${year}, ${hour}:${minute} ${ampm}`;\n    }\n  };\n\n  // Global editing state\n  let pageIsEditing = false;\n\n  // Toggle priority actions visibility based on edit mode\n  const editButton = document.querySelector(\'[data-module="scl-edit-button"]\');\n  if (editButton) {\n    const priorityActions = document.querySelectorAll(".scl-priority-actions");\n    const addButtons = document.querySelectorAll(".scl-priority-button--hidden");\n    const moreToggles = document.querySelectorAll(".scl-priority-more-toggle");\n\n    // Show "Show more" toggle buttons only when not in edit mode\n    const updatePriorityVisibility = () => {\n      priorityActions.forEach(action => {\n        action.classList.toggle("scl-priority-actions--hidden", !pageIsEditing);\n      });\n      addButtons.forEach(button => {\n        button.style.display = pageIsEditing ? "inline-block" : "none";\n      });\n\n      // When editing, show all priorities\n      if (pageIsEditing) {\n        // Hide all "Show more" toggles\n        moreToggles.forEach(toggle => {\n          toggle.style.display = "none";\n        });\n\n        // Make all priorities visible\n        document.querySelectorAll(".scl-priority-item").forEach(item => {\n          item.style.display = "list-item";\n        });\n      } else {\n        // When not editing, manage "Show more" toggles\n        refreshPriorityDisplay();\n      }\n    };\n\n    // Function to refresh priority display based on current state\n    const refreshPriorityDisplay = () => {\n      const containers = ["#company-priorities-container", "#hmg-priorities-container"];\n      containers.forEach(containerSelector => {\n        const container = document.querySelector(containerSelector);\n        if (!container) return;\n        const list = container.querySelector(".govuk-list");\n        const noMessage = container.querySelector(\'[id^="no-"][id$="-priorities-message"]\');\n\n        // If there\'s no list but should be (we have items), create it\n        if (!list && container.querySelectorAll(".scl-priority-item").length > 0) {\n          const newList = document.createElement("ul");\n          newList.id = containerSelector.replace("#", "") + "-list";\n          newList.className = "govuk-list";\n\n          // Move all priority items into the list\n          const items = container.querySelectorAll(".scl-priority-item");\n          items.forEach(item => newList.appendChild(item));\n\n          // Add the list to the container\n          const addButton = container.querySelector(\'[id^="add-"][id$="-priority-button"]\');\n          if (addButton) {\n            container.insertBefore(newList, addButton);\n          } else {\n            container.appendChild(newList);\n          }\n\n          // Hide "no priorities" message\n          if (noMessage) {\n            noMessage.style.display = "none";\n          }\n          return;\n        }\n        if (!list) return;\n        const items = list.querySelectorAll(".scl-priority-item");\n        const moreToggle = list.querySelector(".scl-priority-more-toggle");\n\n        // Update "no priorities" message visibility\n        if (noMessage) {\n          noMessage.style.display = items.length === 0 ? "block" : "none";\n        }\n\n        // If we have no items, remove the list\n        if (items.length === 0) {\n          list.remove();\n          return;\n        }\n\n        // Remove any existing "Show more" toggle\n        if (moreToggle) {\n          moreToggle.remove();\n        }\n\n        // If we have more than 5 priorities, add the toggle and hide extras\n        if (items.length > 5) {\n          // Hide priorities beyond the first 5\n          items.forEach((item, index) => {\n            if (index >= 5) {\n              item.style.display = "none";\n            } else {\n              item.style.display = "list-item";\n            }\n          });\n\n          // Create and add the "Show more" toggle\n          const newToggle = document.createElement("li");\n          newToggle.className = "scl-priority-more-toggle";\n          newToggle.dataset.moreText = "Show all priorities";\n          newToggle.dataset.lessText = "Show fewer priorities";\n          const toggleButton = document.createElement("button");\n          toggleButton.className = "govuk-button govuk-button--secondary";\n          toggleButton.textContent = "Show all priorities";\n          newToggle.appendChild(toggleButton);\n\n          // Insert after the 5th item\n          if (items[4] && items[4].nextSibling) {\n            list.insertBefore(newToggle, items[4].nextSibling);\n          } else {\n            list.appendChild(newToggle);\n          }\n\n          // Add toggle functionality\n          const button = newToggle.querySelector("button");\n          let isExpanded = false;\n          button.addEventListener("click", () => {\n            isExpanded = !isExpanded;\n            button.textContent = isExpanded ? newToggle.dataset.lessText : newToggle.dataset.moreText;\n\n            // Show/hide priorities beyond the first 5\n            items.forEach((item, index) => {\n              if (index >= 5) {\n                item.style.display = isExpanded ? "list-item" : "none";\n              }\n            });\n          });\n        } else {\n          // Show all priorities if we have 5 or fewer\n          items.forEach(item => {\n            item.style.display = "list-item";\n          });\n        }\n      });\n    };\n\n    // Initialize priority visibility\n    updatePriorityVisibility();\n\n    // Listen for edit button clicks\n    editButton.addEventListener("click", () => {\n      pageIsEditing = !pageIsEditing;\n      updatePriorityVisibility();\n\n      // Force refresh all priority items to update their visibility state\n      document.querySelectorAll(".scl-priority-actions").forEach(action => {\n        action.classList.toggle("scl-priority-actions--hidden", !pageIsEditing);\n      });\n\n      // Update the last updated timestamp when saving\n      if (!pageIsEditing) {\n        updateLastUpdated();\n\n        // Check each container for empty priority lists and update messages\n        ["#company-priorities-container", "#hmg-priorities-container"].forEach(selector => {\n          const container = document.querySelector(selector);\n          if (!container) return;\n          const list = container.querySelector(".govuk-list");\n          const noMessage = container.querySelector(\'[id^="no-"][id$="-priorities-message"]\');\n\n          // If list exists but has no items, or doesn\'t exist, show the message\n          if ((!list || list.querySelectorAll(".scl-priority-item").length === 0) && noMessage) {\n            noMessage.style.display = "block";\n            if (list) list.remove();\n          }\n        });\n\n        // Then refresh the overall display\n        refreshPriorityDisplay();\n      }\n    });\n  }\n\n  // Handle Company Priorities\n  const setupPriorityHandlers = (containerSelector, type) => {\n    const container = document.querySelector(containerSelector);\n    if (!container) return;\n    const duns = container.getAttribute("data-company-duns");\n    const insightType = container.getAttribute("data-insight-type");\n    const listId = `${insightType.replace("_", "-")}-list`;\n    const noMessageId = `no-${insightType.replace("_", "-")}-message`;\n    const addButtonId = `add-${insightType.replace("_", "-")}-button`;\n    const list = document.getElementById(listId);\n    const noMessage = document.getElementById(noMessageId);\n    const addButton = document.getElementById(addButtonId);\n\n    // Add new priority\n    addButton.addEventListener("click", () => {\n      // Hide "no priorities" message when adding a new priority\n      if (noMessage) {\n        noMessage.style.display = "none";\n      }\n\n      // Create or get list\n      let priorityList = list;\n      if (!priorityList) {\n        priorityList = document.createElement("ul");\n        priorityList.id = listId;\n        priorityList.className = "govuk-list";\n        container.insertBefore(priorityList, addButton);\n      }\n\n      // Create a new priority item at the end of the list\n      const newItem = document.createElement("li");\n      newItem.className = "scl-priority-item scl-priority-item--new";\n\n      // Generate a temporary ID for the new item\n      const tempId = "new-priority-" + Date.now();\n      newItem.setAttribute("data-temp-id", tempId);\n\n      // Create the form elements\n      const editingDiv = createElement("div", {\n        className: "scl-priority-editing"\n      });\n\n      // Title field\n      const titleGroup = createElement("div", {\n        className: "govuk-form-group"\n      });\n      const titleLabel = createElement("label", {\n        className: "govuk-label",\n        for: `${tempId}-title`\n      }, ["Priority"]);\n      const titleInput = createElement("input", {\n        className: "govuk-input",\n        id: `${tempId}-title`,\n        name: "title",\n        type: "text"\n      });\n      titleGroup.appendChild(titleLabel);\n      titleGroup.appendChild(titleInput);\n\n      // Details field\n      const detailsGroup = createElement("div", {\n        className: "govuk-form-group"\n      });\n      const detailsLabel = createElement("label", {\n        className: "govuk-label",\n        for: `${tempId}-details`\n      }, ["Details"]);\n      const detailsTextarea = createElement("textarea", {\n        className: "govuk-textarea",\n        id: `${tempId}-details`,\n        name: "details",\n        rows: "5"\n      });\n      detailsGroup.appendChild(detailsLabel);\n      detailsGroup.appendChild(detailsTextarea);\n\n      // Buttons\n      const buttonGroup = createElement("div", {\n        className: "govuk-button-group"\n      });\n      const saveButton = createElement("button", {\n        className: "govuk-button scl-priority-save"\n      }, ["Save"]);\n      const cancelButton = createElement("button", {\n        className: "govuk-button govuk-button--secondary scl-priority-cancel"\n      }, ["Cancel"]);\n      buttonGroup.appendChild(saveButton);\n      buttonGroup.appendChild(cancelButton);\n\n      // Assemble the form\n      editingDiv.appendChild(titleGroup);\n      editingDiv.appendChild(detailsGroup);\n      editingDiv.appendChild(buttonGroup);\n      newItem.appendChild(editingDiv);\n      priorityList.appendChild(newItem);\n\n      // Scroll to the new item\n      newItem.scrollIntoView({\n        behavior: "smooth",\n        block: "center"\n      });\n\n      // Focus the title input\n      setTimeout(() => {\n        titleInput.focus();\n      }, 100);\n\n      // Setup save/cancel handlers\n      setupNewPriorityHandlers(newItem, duns, insightType);\n    });\n\n    // Setup handlers for a new priority item\n    const setupNewPriorityHandlers = (item, duns, insightType) => {\n      const saveButton = item.querySelector(".scl-priority-save");\n      const cancelButton = item.querySelector(".scl-priority-cancel");\n      const titleInput = item.querySelector(\'input[name="title"]\');\n      const detailsInput = item.querySelector(\'textarea[name="details"]\');\n\n      // Cancel adding\n      cancelButton.addEventListener("click", () => {\n        item.remove();\n\n        // Check if this was the only item and show "no priorities" message if needed\n        const listElement = document.getElementById(listId);\n        if (listElement && listElement.querySelectorAll(".scl-priority-item").length === 0) {\n          listElement.remove();\n          if (noMessage) {\n            noMessage.style.display = "block";\n          }\n        }\n      });\n\n      // Save new priority\n      saveButton.addEventListener("click", async () => {\n        const title = titleInput.value.trim();\n        const details = detailsInput.value.trim();\n        if (!title) {\n          alert("Please enter a title for the priority");\n          return;\n        }\n        saveButton.textContent = "Saving...";\n        saveButton.disabled = true;\n        const endpoint = `/api/v1/company/${duns}/insights/${insightType}`;\n        const {\n          error,\n          response\n        } = await minTimeFetch(750, endpoint, {\n          method: "POST",\n          headers: {\n            "Content-Type": "application/json",\n            "X-CSRFToken": token\n          },\n          body: JSON.stringify({\n            title,\n            details\n          })\n        });\n        if (error) {\n          saveButton.textContent = "Error!";\n          await timeout(750);\n          saveButton.textContent = "Save";\n          saveButton.disabled = false;\n          return;\n        }\n        const data = await response.json();\n\n        // Replace editing form with the saved priority content\n        item.setAttribute("data-priority-id", data.id);\n        item.removeAttribute("data-temp-id");\n        item.classList.remove("scl-priority-item--new");\n\n        // Clear existing content\n        while (item.firstChild) {\n          item.removeChild(item.firstChild);\n        }\n\n        // Create the content elements\n        const contentDiv = createElement("div", {\n          className: "scl-priority-content"\n        });\n\n        // Title\n        const titleElement = createElement("b", {\n          className: "scl-priority-title"\n        }, [data.title]);\n\n        // Details with line breaks\n        const detailsElement = createElement("div", {\n          className: "scl-priority-details"\n        });\n        data.details.split("\\n").forEach((line, index, array) => {\n          detailsElement.appendChild(document.createTextNode(line));\n          if (index < array.length - 1) {\n            detailsElement.appendChild(document.createElement("br"));\n          }\n        });\n\n        // Author info\n        const authorInfo = createElement("p", {\n          className: "govuk-body-s govuk-!-margin-top-1"\n        }, [`Added by ${data.created_by} on ${new Date(data.created_at).toLocaleDateString("en-GB", {\n          day: "numeric",\n          month: "short",\n          year: "numeric"\n        })}`]);\n        contentDiv.appendChild(titleElement);\n        contentDiv.appendChild(detailsElement);\n        contentDiv.appendChild(authorInfo);\n\n        // Action buttons\n        const actionsDiv = createElement("div", {\n          className: `scl-priority-actions ${!pageIsEditing ? "scl-priority-actions--hidden" : ""}`\n        });\n        const editButton = createElement("button", {\n          className: "govuk-button govuk-button--secondary scl-button-edit-priority"\n        }, ["Edit"]);\n        const deleteButton = createElement("button", {\n          className: "govuk-button govuk-button--warning scl-button-delete-priority"\n        }, ["Delete"]);\n        actionsDiv.appendChild(editButton);\n        actionsDiv.appendChild(deleteButton);\n        item.appendChild(contentDiv);\n        item.appendChild(actionsDiv);\n\n        // Add event listeners to the new buttons\n        setupItemEventListeners(item);\n\n        // Hide "no priorities" message if it exists\n        if (noMessage) {\n          noMessage.style.display = "none";\n        }\n\n        // Refresh the priority display\n        refreshPriorityDisplay();\n\n        // Update the last updated timestamp\n        updateLastUpdated();\n      });\n    };\n\n    // Setup edit/delete buttons for a priority item\n    const setupItemEventListeners = item => {\n      const editButton = item.querySelector(".scl-button-edit-priority");\n      const deleteButton = item.querySelector(".scl-button-delete-priority");\n      const priorityId = item.getAttribute("data-priority-id");\n\n      // Edit priority in place\n      editButton.addEventListener("click", async () => {\n        // Get current content\n        const titleElement = item.querySelector(".scl-priority-title");\n        const detailsElement = item.querySelector(".scl-priority-details");\n        const currentTitle = titleElement.textContent.trim();\n        // Get text content with newlines preserved\n        let currentDetails = "";\n        if (detailsElement) {\n          // Extract text and preserve line breaks\n          Array.from(detailsElement.childNodes).forEach(node => {\n            if (node.nodeType === Node.TEXT_NODE) {\n              currentDetails += node.textContent;\n            } else if (node.nodeName === "BR") {\n              currentDetails += "\\n";\n            }\n          });\n        }\n\n        // Save original DOM structure\n        item.setAttribute("data-original-structure", "saved");\n        // Store the original elements for later restore\n        const origContent = item.cloneNode(true);\n\n        // Clear the item\n        while (item.firstChild) {\n          item.removeChild(item.firstChild);\n        }\n\n        // Create editing form\n        const editingDiv = createElement("div", {\n          className: "scl-priority-editing"\n        });\n\n        // Title field\n        const titleGroup = createElement("div", {\n          className: "govuk-form-group"\n        });\n        const titleLabel = createElement("label", {\n          className: "govuk-label",\n          for: `edit-${priorityId}-title`\n        }, ["Priority"]);\n        const titleInput = createElement("input", {\n          className: "govuk-input",\n          id: `edit-${priorityId}-title`,\n          name: "title",\n          type: "text",\n          value: currentTitle\n        });\n        titleGroup.appendChild(titleLabel);\n        titleGroup.appendChild(titleInput);\n\n        // Details field\n        const detailsGroup = createElement("div", {\n          className: "govuk-form-group"\n        });\n        const detailsLabel = createElement("label", {\n          className: "govuk-label",\n          for: `edit-${priorityId}-details`\n        }, ["Details"]);\n        const detailsTextarea = createElement("textarea", {\n          className: "govuk-textarea",\n          id: `edit-${priorityId}-details`,\n          name: "details",\n          rows: "5"\n        });\n        detailsTextarea.textContent = currentDetails.trim();\n        detailsGroup.appendChild(detailsLabel);\n        detailsGroup.appendChild(detailsTextarea);\n\n        // Buttons\n        const buttonGroup = createElement("div", {\n          className: "govuk-button-group"\n        });\n        const saveButton = createElement("button", {\n          className: "govuk-button scl-priority-update"\n        }, ["Save"]);\n        const cancelButton = createElement("button", {\n          className: "govuk-button govuk-button--secondary scl-priority-cancel-edit"\n        }, ["Cancel"]);\n        buttonGroup.appendChild(saveButton);\n        buttonGroup.appendChild(cancelButton);\n\n        // Assemble the form\n        editingDiv.appendChild(titleGroup);\n        editingDiv.appendChild(detailsGroup);\n        editingDiv.appendChild(buttonGroup);\n        item.appendChild(editingDiv);\n\n        // Setup save/cancel handlers for editing\n        const updateButton = item.querySelector(".scl-priority-update");\n\n        // Cancel editing\n        cancelButton.addEventListener("click", () => {\n          // Restore original content by replacing the entire item\n          while (item.firstChild) {\n            item.removeChild(item.firstChild);\n          }\n\n          // Clone each child node from the original content\n          Array.from(origContent.childNodes).forEach(node => {\n            item.appendChild(node.cloneNode(true));\n          });\n          item.removeAttribute("data-original-structure");\n\n          // Re-setup event listeners\n          setupItemEventListeners(item);\n        });\n\n        // Update priority\n        updateButton.addEventListener("click", async () => {\n          const title = titleInput.value.trim();\n          const details = detailsTextarea.value.trim();\n          if (!title) {\n            alert("Please enter a title for the priority");\n            return;\n          }\n          updateButton.textContent = "Saving...";\n          updateButton.disabled = true;\n          const endpoint = `/api/v1/insights/${priorityId}`;\n          const {\n            error,\n            response\n          } = await minTimeFetch(750, endpoint, {\n            method: "PATCH",\n            headers: {\n              "Content-Type": "application/json",\n              "X-CSRFToken": token\n            },\n            body: JSON.stringify({\n              title,\n              details\n            })\n          });\n          if (error) {\n            updateButton.textContent = "Error!";\n            await timeout(750);\n            updateButton.textContent = "Save";\n            updateButton.disabled = false;\n            return;\n          }\n          const data = await response.json();\n\n          // Clear current content\n          while (item.firstChild) {\n            item.removeChild(item.firstChild);\n          }\n\n          // Create the content elements\n          const contentDiv = createElement("div", {\n            className: "scl-priority-content"\n          });\n\n          // Title\n          const titleElement = createElement("b", {\n            className: "scl-priority-title"\n          }, [data.title]);\n\n          // Details with line breaks\n          const detailsElement = createElement("div", {\n            className: "scl-priority-details"\n          });\n          data.details.split("\\n").forEach((line, index, array) => {\n            detailsElement.appendChild(document.createTextNode(line));\n            if (index < array.length - 1) {\n              detailsElement.appendChild(document.createElement("br"));\n            }\n          });\n\n          // Author info\n          const authorInfo = createElement("p", {\n            className: "govuk-body-s govuk-!-margin-top-1"\n          }, [`Added by ${data.created_by} on ${new Date(data.created_at).toLocaleDateString("en-GB", {\n            day: "numeric",\n            month: "short",\n            year: "numeric"\n          })}`]);\n          contentDiv.appendChild(titleElement);\n          contentDiv.appendChild(detailsElement);\n          contentDiv.appendChild(authorInfo);\n\n          // Action buttons\n          const actionsDiv = createElement("div", {\n            className: `scl-priority-actions ${!pageIsEditing ? "scl-priority-actions--hidden" : ""}`\n          });\n          const editButton = createElement("button", {\n            className: "govuk-button govuk-button--secondary scl-button-edit-priority"\n          }, ["Edit"]);\n          const deleteButton = createElement("button", {\n            className: "govuk-button govuk-button--warning scl-button-delete-priority"\n          }, ["Delete"]);\n          actionsDiv.appendChild(editButton);\n          actionsDiv.appendChild(deleteButton);\n          item.appendChild(contentDiv);\n          item.appendChild(actionsDiv);\n\n          // Re-setup event listeners\n          setupItemEventListeners(item);\n\n          // Update the last updated timestamp\n          updateLastUpdated();\n        });\n      });\n\n      // Delete priority\n      deleteButton.addEventListener("click", async () => {\n        if (!confirm("Are you sure you want to delete this priority?")) {\n          return;\n        }\n        deleteButton.textContent = "Deleting...";\n        deleteButton.disabled = true;\n        const {\n          error\n        } = await minTimeFetch(750, `/api/v1/insights/${priorityId}`, {\n          method: "DELETE",\n          headers: {\n            "X-CSRFToken": token\n          }\n        });\n        if (error) {\n          deleteButton.textContent = "Error!";\n          await timeout(750);\n          deleteButton.textContent = "Delete";\n          deleteButton.disabled = false;\n          return;\n        }\n\n        // Remove item from UI\n        item.remove();\n\n        // Check if list is now empty\n        const listElement = document.getElementById(listId);\n        if (listElement && listElement.querySelectorAll(".scl-priority-item").length === 0) {\n          listElement.remove();\n          if (noMessage) {\n            noMessage.style.display = "block";\n          }\n        } else if (listElement) {\n          // Refresh the priority display\n          refreshPriorityDisplay();\n        }\n\n        // Update the last updated timestamp\n        updateLastUpdated();\n      });\n    };\n\n    // Setup event listeners for existing items\n    const items = container.querySelectorAll(".scl-priority-item");\n    items.forEach(setupItemEventListeners);\n  };\n\n  // Initialize priority handlers when DOM is loaded\n  document.addEventListener("DOMContentLoaded", () => {\n    setupPriorityHandlers("#company-priorities-container", "company_priority");\n    setupPriorityHandlers("#hmg-priorities-container", "hmg_priority");\n\n    // Ensure initial state of "no priorities" messages is correct\n    refreshPriorityDisplay();\n  });\n\n  // Function to refresh priority display across the page\n  const refreshPriorityDisplay = () => {\n    if (pageIsEditing) return; // Don\'t refresh during edit mode\n\n    const containers = ["#company-priorities-container", "#hmg-priorities-container"];\n    containers.forEach(containerSelector => {\n      const container = document.querySelector(containerSelector);\n      if (!container) return;\n      const list = container.querySelector(".govuk-list");\n      const noMessage = container.querySelector(\'[id^="no-"][id$="-priorities-message"]\');\n\n      // Update "no priorities" message visibility\n      if (noMessage) {\n        if (!list || !list.querySelectorAll(".scl-priority-item").length) {\n          noMessage.style.display = "block";\n          if (list) list.remove();\n          return;\n        } else {\n          noMessage.style.display = "none";\n        }\n      }\n      if (!list) return;\n      const items = Array.from(list.querySelectorAll(".scl-priority-item"));\n      const moreToggle = list.querySelector(".scl-priority-more-toggle");\n\n      // Remove any existing "Show more" toggle\n      if (moreToggle) {\n        moreToggle.remove();\n      }\n\n      // If we have more than 5 priorities, add the toggle and hide extras\n      if (items.length > 5) {\n        // Hide priorities beyond the first 5\n        items.forEach((item, index) => {\n          if (index >= 5) {\n            item.style.display = "none";\n          } else {\n            item.style.display = "list-item";\n          }\n        });\n\n        // Create and add the "Show more" toggle\n        const newToggle = createElement("li", {\n          className: "scl-priority-more-toggle"\n        });\n        newToggle.dataset.moreText = "Show all priorities";\n        newToggle.dataset.lessText = "Show fewer priorities";\n        const toggleButton = createElement("button", {\n          className: "govuk-button govuk-button--secondary",\n          textContent: "Show all priorities"\n        });\n        newToggle.appendChild(toggleButton);\n\n        // Insert after the 5th item\n        if (items[4] && items[4].nextSibling) {\n          list.insertBefore(newToggle, items[4].nextSibling);\n        } else {\n          list.appendChild(newToggle);\n        }\n\n        // Add toggle functionality\n        const button = newToggle.querySelector("button");\n        let isExpanded = false;\n        button.addEventListener("click", () => {\n          isExpanded = !isExpanded;\n          button.textContent = isExpanded ? newToggle.dataset.lessText : newToggle.dataset.moreText;\n\n          // Show/hide priorities beyond the first 5\n          items.forEach((item, index) => {\n            if (index >= 5) {\n              item.style.display = isExpanded ? "list-item" : "none";\n            }\n          });\n        });\n      } else {\n        // Show all priorities if we have 5 or fewer\n        items.forEach(item => {\n          item.style.display = "list-item";\n        });\n      }\n    });\n  };\n})();\n\n//# sourceURL=webpack:///./scl/core/static/scl.js?')}},__webpack_exports__={};__webpack_modules__["./scl/core/static/scl.js"]()})();